diff --git a/node_modules/@astrojs/deno/dist/index.js b/node_modules/@astrojs/deno/dist/index.js
index 7fa7cef..20c4d2a 100644
--- a/node_modules/@astrojs/deno/dist/index.js
+++ b/node_modules/@astrojs/deno/dist/index.js
@@ -57,10 +57,11 @@ const COMPATIBLE_NODE_MODULES = [
   // 'wasi',
   // 'webcrypto',
   "worker_threads",
-  "zlib"
+  "zlib",
 ];
 const DENO_IMPORTS_SHIM = `@astrojs/deno/__deno_imports.js`;
-const DENO_IMPORTS = `export { Server } from "https://deno.land/std@${DENO_VERSION}/http/server.ts"
+const DENO_IMPORTS =
+  `export { Server } from "https://deno.land/std@${DENO_VERSION}/http/server.ts"
 export { serveFile } from 'https://deno.land/std@${DENO_VERSION}/http/file_server.ts';
 export { fromFileUrl } from "https://deno.land/std@${DENO_VERSION}/path/mod.ts";`;
 function getAdapter(args) {
@@ -68,7 +69,7 @@ function getAdapter(args) {
     name: "@astrojs/deno",
     serverEntrypoint: "@astrojs/deno/server.js",
     args: args ?? {},
-    exports: ["stop", "handle", "start", "running"]
+    exports: ["stop", "handle", "start", "running"],
   };
 }
 const denoImportsShimPlugin = {
@@ -77,17 +78,22 @@ const denoImportsShimPlugin = {
     build.onLoad({ filter: /__deno_imports\.js$/ }, async (args) => {
       return {
         contents: DENO_IMPORTS,
-        loader: "js"
+        loader: "js",
       };
     });
-  }
+  },
 };
 const denoRenameNodeModulesPlugin = {
   name: "@astrojs/esbuild-rename-node-modules",
   setup(build) {
-    const filter = new RegExp(COMPATIBLE_NODE_MODULES.map((mod) => `(^${mod}$)`).join("|"));
-    build.onResolve({ filter }, (args) => ({ path: "node:" + args.path, external: true }));
-  }
+    const filter = new RegExp(
+      COMPATIBLE_NODE_MODULES.map((mod) => `(^${mod}$)`).join("|"),
+    );
+    build.onResolve(
+      { filter },
+      (args) => ({ path: "node:" + args.path, external: true }),
+    );
+  },
 };
 function createIntegration(args) {
   let _buildConfig;
@@ -100,10 +106,10 @@ function createIntegration(args) {
         _buildConfig = config.build;
         if (config.output === "static") {
           console.warn(
-            `[@astrojs/deno] \`output: "server"\` or \`output: "hybrid"\` is required to use this adapter.`
+            `[@astrojs/deno] \`output: "server"\` or \`output: "hybrid"\` is required to use this adapter.`,
           );
           console.warn(
-            `[@astrojs/deno] Otherwise, this adapter is not required to deploy a static site to Deno.`
+            `[@astrojs/deno] Otherwise, this adapter is not required to deploy a static site to Deno.`,
           );
         }
       },
@@ -114,8 +120,12 @@ function createIntegration(args) {
           vite.resolve.alias = vite.resolve.alias ?? {};
           vite.build = vite.build ?? {};
           vite.build.rollupOptions = vite.build.rollupOptions ?? {};
-          vite.build.rollupOptions.external = vite.build.rollupOptions.external ?? [];
-          const aliases = [{ find: "react-dom/server", replacement: "react-dom/server.browser" }];
+          vite.build.rollupOptions.external =
+            vite.build.rollupOptions.external ?? [];
+          const aliases = [{
+            find: "react-dom/server",
+            replacement: "react-dom/server.browser",
+          }];
           if (Array.isArray(vite.resolve.alias)) {
             vite.resolve.alias = [...vite.resolve.alias, ...aliases];
           } else {
@@ -124,14 +134,14 @@ function createIntegration(args) {
             }
           }
           vite.ssr = {
-            noExternal: COMPATIBLE_NODE_MODULES
+            noExternal: COMPATIBLE_NODE_MODULES,
           };
           if (Array.isArray(vite.build.rollupOptions.external)) {
             vite.build.rollupOptions.external.push(DENO_IMPORTS_SHIM);
           } else if (typeof vite.build.rollupOptions.external !== "function") {
             vite.build.rollupOptions.external = [
               vite.build.rollupOptions.external,
-              DENO_IMPORTS_SHIM
+              DENO_IMPORTS_SHIM,
             ];
           }
         }
@@ -141,7 +151,7 @@ function createIntegration(args) {
         const entryUrl = new URL(_buildConfig.serverEntry, _buildConfig.server);
         const pth = fileURLToPath(entryUrl);
         await esbuild.build({
-          target: "es2020",
+          target: "esnext",
           platform: "browser",
           entryPoints: [pth],
           outfile: pth,
@@ -150,25 +160,29 @@ function createIntegration(args) {
           bundle: true,
           external: [
             ...COMPATIBLE_NODE_MODULES.map((mod) => `node:${mod}`),
-            "@astrojs/markdown-remark"
+            "@astrojs/markdown-remark",
           ],
           plugins: [denoImportsShimPlugin, denoRenameNodeModulesPlugin],
           banner: {
-            js: SHIM
-          }
+            js: SHIM,
+          },
         });
         try {
-          const chunkFileNames = ((_c = (_b = (_a = _vite == null ? void 0 : _vite.build) == null ? void 0 : _a.rollupOptions) == null ? void 0 : _b.output) == null ? void 0 : _c.chunkFileNames) ?? `chunks/chunk.[hash].mjs`;
+          const chunkFileNames =
+            ((_c = (_b = (_a = _vite == null ? void 0 : _vite.build) == null
+                  ? void 0
+                  : _a.rollupOptions) == null
+                ? void 0
+                : _b.output) == null
+              ? void 0
+              : _c.chunkFileNames) ?? `chunks/chunk.[hash].mjs`;
           const chunkPath = npath.dirname(chunkFileNames);
           const chunksDirUrl = new URL(chunkPath + "/", _buildConfig.server);
           await fs.promises.rm(chunksDirUrl, { recursive: true, force: true });
         } catch {
         }
-      }
-    }
+      },
+    },
   };
 }
-export {
-  createIntegration as default,
-  getAdapter
-};
+export { createIntegration as default, getAdapter };
